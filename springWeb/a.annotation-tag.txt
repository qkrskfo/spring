<< annotation-driven, component-scan, annotation-config 차이점 >>

1. <mvc:annotation-driven>

		a. 스프링 MVC 컴포넌트들을 그것의 디폴트 설정을 가지고 활성화하기 위해 사용된다.
		
		b. 이 태그는 Spring MVC가 @Controller에 요청을 보내기 위해 필요한 HandlerMapping과 HandlerAdapter를 bean으로 등록한다.
			- 이렇게 등록된 bean에 의해 요청 url과 컨트롤러를 매칭할 수 있다.
			- 또한 컨트롤러(@Controller)에서는 @RequestMapping, @ExceptionHandler 등과 같은 주석을 통해 해당 기능을 사용할 수 있도록 한다.
			- 근본적으로 @Controller 없이는 이 태그는 아무것도 하지 않는다고 할 수 있다.
			- bean을 생성하기 위해 xml 파일에 context:component-scan을 명시하면 이 태그를 포함하지 않아도 MVC 애플리케이션은 작동한다.
		
		d. RequestMappingHandlerMapping?
			- 요청 url과 매칭되는 컨트롤러(@Controller)를 검색하는 역할. 즉, 요청 url을 보고 어떤 컨트롤러가 처리할지 결정한다.
		
		e.RequestMappingHandlerAdapter?
			- 컨트롤러의 실행 결과(요청을 처리한 결과)를 리턴하는 역할. Annotation 기반의 Controller 처리를 위해 반드시 필요하다.

2. <context:component-scan>

		a. 특정 패키지 안의 클래스들을 스캔하고, Annotation을 확인 후 bean 인스턴스를 생성한다.
			- @Component @Controller @Service @Repository 등의 Annotation이 존재해야 bean을 생성할 수 있다.
		
		b. 이것의 장점 중 하나는 @Autowired와 @Qualifier Annotation을 인식할 수 있다.
		
		c. component-scan을 선언했다면 context:annotation-config를 선언할 필요가 없다.

3.<context:annotation-config>

		d. ApplicationContext 안에 이미 등록된 bean들의 Annotation을 활성화 하기 위해 사용된다.
			- bean들이 XML로 등록됐는지 혹은 패키지 스캐닝을 통해 등록됐는지는 중요하지 않다.
		
		e. 이미 스프링 컨텍스트에 의해 생성되어 저장된 bean들에 대해서 @Autowired와 @Qualifier Annotation을 인식할 수 있다.
		
		f. component-scan 또한 같은 일을 할 수 있는데, context:annotation-config는 bean을 등록하는 작업을 하지 않는다.
			- 즉, bean을 등록하기 위해 패키지를 안의 클래스를 스캔할 수 없다.
		
		g. 이 태그를 설정하면 @Required @Autowired @Resource @PostConstruct @PreDestroy @Configuration 기능을 각각 설정하지 않아도 된다.
