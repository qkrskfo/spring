<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis3.dao.mapper.StudentMapper">

<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@ resultMap 정의 @@@@@@@@@@@@@@@@@ */
-->
	<resultMap id="studentResultMap" type="com.mybatis3.domain.Student">
		<result column="STUD_ID" property="studId" />
		<result column="NAME" property="name" />
		<result column="EMAIL" property="email" />
		<result column="DOB" property="dob" />
	</resultMap> 
	
	<resultMap id="studentWithAddressResultMap" type="com.mybatis3.domain.Student" autoMapping="true">
		<result column="STUD_ID" property="studId" />
		<result column="NAME" property="name" />
		<result column="EMAIL" property="email" />
		<result column="DOB" property="dob" />
		<association property="address" javaType="com.mybatis3.domain.Address">
			<!-- 1대1의 관계는 어소시에이션.  -->
			<result column="ADDR_ID" property="addrId" />
			<result column="STREET" property="street" />
			<result column="CITY" property="city" />
			<result column="STATE" property="state" />
			<result column="ZIP" property="zip" />
			<result column="COUNTRY" property="country" />
			<!-- 컬럼이라고 표현하기 위해 대문자로 썼음. 소문자로 써도됨 -->
		</association>
	</resultMap> 
	
	<resultMap id="studentWithCoursesResultMap" type="com.mybatis3.domain.Student">
		<result column="STUD_ID" property="studId" />
		<result column="NAME" property="name" />
		<result column="EMAIL" property="email" />
		<result column="DOB" property="dob" />
		<collection property="courseList" ofType="com.mybatis3.domain.Course" javaType="java.util.List">
			<result column="COURSE_ID" property="courseId" />
			<result column="COURSE_NAME" property="name" />
			<result column="DESCRIPTION" property="description" />
			<result column="START_DATE" property="startDate" />
			<result column="END_DATE" property="endDate" />
		</collection>
	</resultMap>
	
	<resultMap id="studentWithAddressWithCoursesResultMap" type="com.mybatis3.domain.Student">
	<result column="STUD_ID" property="studId" />
		<result column="NAME" property="name" />
		<result column="EMAIL" property="email" />
		<result column="DOB" property="dob" />
		<association property="address" javaType="com.mybatis3.domain.Address">
			<!-- 1대1의 관계는 어소시에이션.  -->
			<result column="ADDR_ID" property="addrId" />
			<result column="STREET" property="street" />
			<result column="CITY" property="city" />
			<result column="STATE" property="state" />
			<result column="ZIP" property="zip" />
			<result column="COUNTRY" property="country" />
		</association>
		<collection property="courseList" ofType="com.mybatis3.domain.Course" javaType="java.util.List">
			<result column="COURSE_ID" property="courseId" />
			<result column="COURSE_NAME" property="name" />
			<result column="DESCRIPTION" property="description" />
			<result column="START_DATE" property="startDate" />
			<result column="END_DATE" property="endDate" />
		</collection>
	</resultMap>
	
	<!-- 
	/***********************************************************
		INSERT
	***********************************************************/
		parameterType: DTO, VO, Domain
	-->
	<insert id="insertStudent" parameterType="com.mybatis3.domain.Student">
		insert into students(stud_id,name,email,dob)
		values (#{studId},#{name},#{email},#{dob})
	</insert>
	
	<insert id="insertStudentBySequence1" parameterType="com.mybatis3.domain.Student">
		insert into students(stud_id,name,email,dob)
		values (STUDENTS_STUD_ID_SEQ.nextval,#{name},#{email},#{dob})
	</insert>

<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@ SELECT [students + addresses + courses(course_enrollment) JOIN] (1 : N) @@@@@@@@@@@@@@@@@ */
	/*
	 * select sql의 결과타입이 DTO, VO, Domain 객체인 경우
	 * resultMap : 
	 */
-->	 
	<select id="findStudentByIdWithAddressWithCourses" parameterType="java.lang.Integer" resultMap="studentWithAddressWithCoursesResultMap">
	select s.*, a.*, c.course_id, c.name as course_name, c.description, c.start_date, c.end_date
		from students s 
		join addresses a on s.stud_id = a.addr_id 
		join course_enrollment ce on s.stud_id = ce.stud_id
		join courses c on ce.course_id = c.course_id
		where s.stud_id=#{studId}
	</select>


<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@ SELECT [students + courses(course_enrollment) JOIN] (1 : N) @@@@@@@@@@@@@@@@@ */
	/*
	 * select sql의 결과타입이 DTO, VO, Domain 객체인 경우
	 * resultMap : 
	 */
-->	 
	<select id="findStudentByIdWithCourses" parameterType="java.lang.Integer" resultMap="studentWithCoursesResultMap">
		select s.stud_id, s.name, s.email, s.dob,
		       c.course_id, c.name as course_name, c.description, c.start_date, c.end_date
		from students s 
		join course_enrollment ce
		on s.stud_id = ce.stud_id
		join courses c
		on ce.course_id=c.course_id where s.stud_id=#{studId}
	</select>

<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@ SELECT [courses + students(course_enrollment) JOIN] (1 : N) @@@@@@@@@@@@@@@@@ */
	/*
	 * select sql의 결과타입이 DTO, VO, Domain 객체인 경우
	 * resultMap : 
	 */
-->		
	
	
	
<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@ SELECT [students + addresses JOIN] (1 : 1) @@@@@@@@@@@@@@@@@ */
	/*
	 * select sql의 결과타입이 DTO, VO, Domain 객체인 경우
	 * resultMap : studentWithAddressResultMap
	 */
-->
	<select id="findStudentByIdWithAddress" parameterType="java.lang.Integer" resultMap="studentWithAddressResultMap">
		SELECT stud_id, name, email, dob, a.addr_id, street, city, state, zip, country
		FROM students s 
		LEFT OUTER JOIN addresses a 
		ON s.addr_id=a.addr_id WHERE stud_id=#{studId}
	</select>


<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@ SELECT @@@@@@@@@@@@@@@@@ */
	/*
	 * select sql의 결과타입이 DTO, VO, Domain 객체인 경우
	 * resultType : Dto
	 */
-->
	<select id="findStudentById" parameterType="java.lang.Integer" resultType="com.mybatis3.domain.Student">
		select stud_id as studId, name, email, dob from students where stud_id=#{studId}
	</select>
	
	<select id="findAllStudents" resultType="com.mybatis3.domain.Student">
		select stud_id as studId, name, email, dob from students
	</select>

<!-- 
	/* @@@@@@@@@@@@@@@@@@@@@@@SELECT@@@@@@@@@@@@@@@@@ */
	/*
	 * select sql의 결과타입이 DTO, VO, Domain 객체인 경우
	 * resultMap : Dto
	 */
-->
	<select id="findStudentByIdResultMap" parameterType="java.lang.Integer" resultMap="studentResultMap">
		select stud_id, name, email, dob from students where stud_id=#{studId}
	</select>
	<select id="findAllStudentsResultMap" resultMap="studentResultMap">
		select stud_id, name, email, dob from students
	</select>	
	
	
	<!-- 
	/*
	 * select sql의 결과타입이 Wrapper(String)객체인 경우
	 * resultType : String, Wrapper
	 * resultType Wrapper(String)
	 */
	-->
	<select id="findStudentNameById" parameterType="java.lang.Integer" resultType="java.lang.String">
	select name from students where stud_id=#{studId}
	</select>
	<select id="findStudentNameList" resultType="java.lang.String">
	select name from students
	</select>
	
	
</mapper>












